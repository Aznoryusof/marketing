} else {
switch(type,
h_clust = k_final <- nb_clust(df_scaled, method="ward.D2"),
k_means = k_final <- nb_clust(df_scaled, method="kmeans")
)
}
return (k_final)
}
h_clust <- function(df_scaled, nb, seed, col_names) {
set.seed(seed)
dist <- dist(df_scaled, method = "euclidean")
# Create cluster linkages and cut by nb of clusters
clust <- hclust(dist, method = "ward.D2")
h_cluster <- cutree(clust, nb)
# Plot linkages and add boxes for nb of cluster
plot(clust)
rect.hclust(clust, k=nb, border="red")
return(h_cluster)
}
k_means <- function(df_scaled, nb, seed, k, col_names) {
set.seed(seed)
k_means_cluster <- kmeans(df_scaled, nb, iter.max=100, nstart=100)
return(k_means_cluster)
}
cluster <- function(df_scaled, type, seed, auto_k, k=NULL, col_names=NULL) {
# Generate final k to use
k_final <- generate_k(type, auto_k, k)
# Run the clustering
switch(type,
h_clust = {
result <- h_clust(df_scaled, k_final, seed, col_names)
},
k_means = {
result <- k_means(df_scaled, k_final, seed, col_names)
}
)
return(result$cluster)
}
# Options: h_clust | k_means
hclust <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = TRUE)
load_data <- function(path) {
read.csv(file = path, row.names=1) %>% return()
}
prepare_data <- function(df) {
# Selects only the numeric values
numeric_cols <- map_lgl(df, is.numeric)
df_numeric <- df[numeric_cols]
df_scaled <- scale(df_numeric)
return(df_scaled)
}
nb_clust <- function(df_scaled, method) {
result <- df_scaled[1:(length(df_scaled) - 1)] %>%
NbClust(min.nc=3, max.nc=15, index="all", method=method)
nb <- result$Best.partition %>%
unique() %>%
length()
return(nb)
}
generate_k <- function(df_scaled, type, auto_k, k) {
if (auto_k == FALSE && !is.null(k)) {
k_final <- k
} else if (auto_k == FALSE && is.null(k)) {
cat("Parameter auto_k indicated as FALSE, please provide a k value.")
stop()
} else {
switch(type,
h_clust = k_final <- nb_clust(df_scaled, method="ward.D2"),
k_means = k_final <- nb_clust(df_scaled, method="kmeans")
)
}
return (k_final)
}
h_clust <- function(df_scaled, nb, seed, col_names) {
set.seed(seed)
dist <- dist(df_scaled, method = "euclidean")
# Create cluster linkages and cut by nb of clusters
clust <- hclust(dist, method = "ward.D2")
h_cluster <- cutree(clust, nb)
# Plot linkages and add boxes for nb of cluster
plot(clust)
rect.hclust(clust, k=nb, border="red")
return(h_cluster)
}
k_means <- function(df_scaled, nb, seed, k, col_names) {
set.seed(seed)
k_means_cluster <- kmeans(df_scaled, nb, iter.max=100, nstart=100)
return(k_means_cluster)
}
cluster <- function(df_scaled, type, seed, auto_k, k=NULL, col_names=NULL) {
# Generate final k to use
k_final <- generate_k(df_scaled, type, auto_k, k)
# Run the clustering
switch(type,
h_clust = {
result <- h_clust(df_scaled, k_final, seed, col_names)
},
k_means = {
result <- k_means(df_scaled, k_final, seed, col_names)
}
)
return(result$cluster)
}
# Options: h_clust | k_means
hclust <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = TRUE)
load_data("./data/SegmentationData.csv") %>%
prepare_data()
load_data <- function(path) {
read.csv(file = path, row.names=1) %>% return()
}
prepare_data <- function(df) {
# Selects only the numeric values
numeric_cols <- map_lgl(df, is.numeric)
df_numeric <- df[numeric_cols]
df_scaled <- scale(df_numeric)
return(df_scaled)
}
nb_clust <- function(df_scaled, method) {
result <- df_scaled[1:(length(df_scaled) - 1)] %>%
NbClust(min.nc=3, max.nc=15, index="all", method=method)
nb <- result$Best.partition %>%
unique() %>%
length()
return(nb)
}
generate_k <- function(df_scaled, type, auto_k, k) {
if (auto_k == FALSE && !is.null(k)) {
k_final <- k
} else if (auto_k == FALSE && is.null(k)) {
cat("Parameter auto_k indicated as FALSE, please provide a k value.")
stop()
} else {
switch(type,
h_clust = k_final <- nb_clust(df_scaled, method="ward.D2"),
k_means = k_final <- nb_clust(df_scaled, method="kmeans")
)
}
return (k_final)
}
h_clust <- function(df_scaled, nb, seed, col_names) {
set.seed(seed)
dist <- dist(df_scaled, method = "euclidean")
# Create cluster linkages and cut by nb of clusters
clust <- hclust(dist, method = "ward.D2")
h_cluster <- cutree(clust, nb)
# Plot linkages and add boxes for nb of cluster
plot(clust)
rect.hclust(clust, k=nb, border="red")
return(h_cluster)
}
k_means <- function(df_scaled, nb, seed, k, col_names) {
set.seed(seed)
k_means_cluster <- kmeans(df_scaled, nb, iter.max=100, nstart=100)
return(k_means_cluster)
}
cluster <- function(df_scaled, type, seed, auto_k, k=NULL, col_names=NULL) {
# Generate final k to use
k_final <- generate_k(df_scaled, type, auto_k, k)
# Run the clustering
switch(type,
h_clust = {
result <- h_clust(df_scaled, k_final, seed, col_names)
},
k_means = {
result <- k_means(df_scaled, k_final, seed, col_names)
result <- result$cluster
}
)
return(result)
}
# Options: h_clust | k_means
hclust <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = TRUE)
kmeans <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("k_means", seed=1990, auto_k = TRUE)
# %>%
#   run_cluster("h_clust")
#%>%
#  run_cluster("kmeans", k=10, col_names)
hclust
kmeans
hclust_k4 <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = FALSE, k = 4)
kmeans_k4 <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("k_means", seed=1990, auto_k = FALSE, k = 4)
hclust_k4
kmeans_k4
hclust_k3 <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = FALSE, k = 3)
kmeans_k3 <- load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("k_means", seed=1990, auto_k = FALSE, k = 3)
hclust_k3
kmeans_k3
seg_data <- read.csv(file = "./data/SegmentationData.csv",row.names=1)
head(seg_data)
std_seg_data <- scale(seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")])
dist <- dist(std_seg_data, method = "euclidean")
as.matrix(dist)[1:5,1:5]
set.seed(1990)
clust <- hclust(dist, method = "ward.D2")
plot(clust)
rect.hclust(clust, k=4, border="red")
h_cluster <- cutree(clust, 4)
clust
h_cluster
h_cluster_k3
hclust_k3
h_cluster
hclust_k4
plot(clust)
h_cluster <- cutree(clust, 3)
rect.hclust(clust, k=3, border="red")
h_cluster
hclust_k3
set.seed(1990)
car_Cluster3 <-kmeans(std_seg_data, 3, iter.max=100,nstart=100)
car_Cluster3
kmeans_k3
car_Cluster3
car_Cluster3
kmeans_k3
car_Cluster3$cluster
kmeans_k3
load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = FALSE)
generate_k <- function(df_scaled, type, auto_k, k) {
if (auto_k == FALSE && !is.null(k)) {
k_final <- k
} else if (auto_k == FALSE && is.null(k)) {
cat("Parameter auto_k indicated as FALSE, please provide a k value.", "\n")
stop()
} else {
switch(type,
h_clust = k_final <- nb_clust(df_scaled, method="ward.D2"),
k_means = k_final <- nb_clust(df_scaled, method="kmeans")
)
}
return (k_final)
}
load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = FALSE, )
generate_k <- function(df_scaled, type, auto_k, k) {
if (auto_k == FALSE && !is.null(k)) {
k_final <- k
} else if (auto_k == FALSE && is.null(k)) {
cat("Parameter auto_k indicated as FALSE, please provide a k value to run the clustering analysis.", "\n")
stop()
} else {
switch(type,
h_clust = k_final <- nb_clust(df_scaled, method="ward.D2"),
k_means = k_final <- nb_clust(df_scaled, method="kmeans")
)
}
return (k_final)
}
load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = FALSE, )
load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = TRUE, )
load_data("./data/SegmentationData.csv") %>%
prepare_data() %>%
cluster("h_clust", seed=1990, auto_k = TRUE, ) %>%
table()
install.packages("dbscan")
library(dbscan)
seg_data <- read.csv(file = "./data/SegmentationData.csv",row.names=1)
head(seg_data)
std_seg_data <- scale(seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")])
dist <- dist(std_seg_data, method = "euclidean")
as.matrix(dist)[1:5,1:5]
std_seg_data
hdbscan(std_seg_data, minPts = 5)
hdbscan_clust <- hdbscan(std_seg_data, minPts = 5)
hdbscan_clust$hc
plot(hdbscan_clust$hc)
hdbscan_clust <- hdbscan(std_seg_data, minPts = 1)
hdbscan_clust <- hdbscan(std_seg_data, minPts = 2)
plot(hdbscan_clust$hc)
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
}
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
plot(hdbscan_clust)
}
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
#plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
plot(hdbscan_clust)
}
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
#plot(hdbscan_clust)
}
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust))
}
for (pts in 2:10) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust, show_flat = T))
}
for (pts in 2:20) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
hdbscan_clust
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust, show_flat = T))
}
hdbscan_clust
for (pts in 2:20) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
print(hdbscan_clust)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust, show_flat = T))
}
hdbscan_clust_final <- hdbscan(std_seg_data, minPts = 2)
print(hdbscan_clust_final)
print(hdbscan_clust_final)
plot(hdbscan_clust_final$hc, main = paste0("minPts: ", 2))
plot(hdbscan_clust_final, show_flat = T)
# for (pts in 2:20) {
#   hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
#   print(hdbscan_clust)
#   plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
#   try(plot(hdbscan_clust, show_flat = T))
# }
hdbscan_clust_final <- hdbscan(std_seg_data, minPts = 2)
print(hdbscan_clust_final)
plot(hdbscan_clust_final$hc, main = paste0("minPts: ", 2))
plot(hdbscan_clust_final, show_flat = T)
hdbscan_clust_final
hdbscan_clust_final$cluster
hdbscan_clust_final$cluster_scores
hdbscan_clust_final$membership_prob
hdbscan_clust_final$cluster
set.seed(1990)
library(NbClust)
library(mclust)
library(dbscan)
library(gmodels)
library(here)
seg_data <- read.csv(file = "./data/SegmentationData.csv",row.names=1)
head(seg_data)
std_seg_data <- scale(seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")])
dist <- dist(std_seg_data, method = "euclidean")
as.matrix(dist)[1:5,1:5]
set.seed(1990)
clust <- hclust(dist, method = "ward.D2")
plot(clust)
set.seed(1990)
clust <- hclust(dist, method = "ward.D2")
plot(clust)
rect.hclust(clust, k=4, border="red")
h_cluster <- cutree(clust, 4)
table(h_cluster)
hclust_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(h_cluster),FUN=mean)
hclust_summary
plot(clust)
h_cluster <- cutree(clust, 3)
rect.hclust(clust, k=3, border="red")
table(h_cluster)
hclust_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(h_cluster),FUN=mean)
hclust_summary
h_cluster <- factor(h_cluster,levels = c(1,2,3),
labels = c("Perf.", "Comfort", "Appearance"))
plot(cut(as.dendrogram(clust), h=9)$lower[[3]])
set.seed(1990)
NbClust(data=std_seg_data[,1:5], min.nc=3, max.nc=15, index="all", method="ward.D2")
CrossTable(seg_data$MBA,h_cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,seg_data$Choice,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
set.seed(1990)
car_Cluster3 <-kmeans(std_seg_data, 3, iter.max=100,nstart=100)
car_Cluster3
Kmean_Cluster<-factor(car_Cluster3$cluster,levels = c(1,2,3),
labels = c("Perf. KM", "Comfort KM", "Appearance KM"))
set.seed(1990)
NbClust(data=std_seg_data[,1:5], min.nc=3, max.nc=15, index="all", method="kmeans")
CrossTable(seg_data$MBA,Kmean_Cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(Kmean_Cluster,seg_data$Choice,prop.chisq = FALSE, prop.r = T, prop.c = T,prop.t = F,chisq = T)
CrossTable(h_cluster,Kmean_Cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
set.seed(1990)
mclustBIC(std_seg_data[,1:5],verbose=F)
set.seed(1990)
lca_clust <- Mclust(std_seg_data[,1:5],verbose = FALSE)
summary(lca_clust)
lca_clusters <- lca_clust$classification
lca_clust_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(lca_clusters),FUN=mean)
lca_clust_summary
lca_clusters<-factor(lca_clusters,levels = c(1,2),
labels = c("Reliability LCA", "Comfort LCA"))
CrossTable(seg_data$MBA,lca_clusters,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(lca_clusters,seg_data$Choice,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,lca_clusters,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(seg_data$MBA,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
hdbscan_clusters <- hdbscan_clust_final$cluster
hdbscan_clusters <- hdbscan_clust_final$cluster
hdbscan_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(hdbscan_clusters),FUN=mean)
hdbscan_summary
# lca_clusters<-factor(lca_clusters,levels = c(1,2),
#                     labels = c("Reliability LCA", "Comfort LCA"))
for (pts in 2:20) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
print(hdbscan_clust)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust, show_flat = T))
}
# hdbscan_clust_final <- hdbscan(std_seg_data, minPts = 2)
# print(hdbscan_clust_final)
# plot(hdbscan_clust_final$hc, main = paste0("minPts: ", 2))
# plot(hdbscan_clust_final, show_flat = T)
# for (pts in 2:20) {
#   hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
#   print(hdbscan_clust)
#   plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
#   try(plot(hdbscan_clust, show_flat = T))
# }
minPts = 3
hdbscan_clust_final <- hdbscan(std_seg_data, minPts = minPts)
print(hdbscan_clust_final)
plot(hdbscan_clust_final$hc, main = paste0("minPts: ", minPts))
plot(hdbscan_clust_final, show_flat = T)
hdbscan_clusters <- hdbscan_clust_final$cluster
hdbscan_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(hdbscan_clusters),FUN=mean)
hdbscan_summary
# lca_clusters<-factor(lca_clusters,levels = c(1,2),
#                     labels = c("Reliability LCA", "Comfort LCA"))
CrossTable(seg_data$MBA,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
# for (pts in 2:20) {
#   hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
#   print(hdbscan_clust)
#   plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
#   try(plot(hdbscan_clust, show_flat = T))
# }
minPts = 4
hdbscan_clust_final <- hdbscan(std_seg_data, minPts = minPts)
print(hdbscan_clust_final)
plot(hdbscan_clust_final$hc, main = paste0("minPts: ", minPts))
plot(hdbscan_clust_final, show_flat = T)
hdbscan_clusters <- hdbscan_clust_final$cluster
hdbscan_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(hdbscan_clusters),FUN=mean)
hdbscan_summary
# lca_clusters<-factor(lca_clusters,levels = c(1,2),
#                     labels = c("Reliability LCA", "Comfort LCA"))
CrossTable(seg_data$MBA,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
for (pts in 2:20) {
hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
print(hdbscan_clust)
plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
try(plot(hdbscan_clust, show_flat = T))
}
# minPts = 4
#
# hdbscan_clust_final <- hdbscan(std_seg_data, minPts = minPts)
# print(hdbscan_clust_final)
# plot(hdbscan_clust_final$hc, main = paste0("minPts: ", minPts))
# plot(hdbscan_clust_final, show_flat = T)
# for (pts in 2:20) {
#   hdbscan_clust <- hdbscan(std_seg_data, minPts = pts)
#   print(hdbscan_clust)
#   plot(hdbscan_clust$hc, main = paste0("minPts: ", pts))
#   try(plot(hdbscan_clust, show_flat = T))
# }
minPts = 2
hdbscan_clust_final <- hdbscan(std_seg_data, minPts = minPts)
print(hdbscan_clust_final)
plot(hdbscan_clust_final$hc, main = paste0("minPts: ", minPts))
plot(hdbscan_clust_final, show_flat = T)
hdbscan_clusters <- hdbscan_clust_final$cluster
hdbscan_summary <- aggregate(std_seg_data[,c("Trendy", "Styling", "Reliability", "Sportiness", "Performance", "Comfort")],by=list(hdbscan_clusters),FUN=mean)
hdbscan_summary
# lca_clusters<-factor(lca_clusters,levels = c(1,2),
#                     labels = c("Reliability LCA", "Comfort LCA"))
CrossTable(seg_data$MBA,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
CrossTable(h_cluster,hdbscan_clust_final$cluster,prop.chisq = FALSE, prop.r = T, prop.c = T,
prop.t = F,chisq = T)
