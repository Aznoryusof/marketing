fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))*3)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-2, 4)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-2, 4),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
ty_car[(nrow(ty_car)-5):nrow(ty_car),]
ty_car[(nrow(ty_car)-5):nrow(ty_car),]
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
as.data.frame(unclass(fit$loadings))
#*3
#multiplied by scalar for plot
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
as.data.frame(unclass(fit$loadings) * 3)
#*3
#multiplied by scalar for plot
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
as.data.frame(unclass(fit$loadings))
#*3
#multiplied by scalar for plot
as.data.frame(unclass(fit$loadings))
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
as.data.frame(unclass(fit$loadings) * 3)
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
as.data.frame(unclass(fit$loadings) * 3)
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
cardata = read.csv(file = "./data/cardata.csv")
head(cardata)
library(psych)
corPlot(cardata[,4:9], numbers = TRUE, upper = FALSE, diag = FALSE)
library(nFactors)
nScree(cardata[,4:9], cor=TRUE) #This function help you determine the number of factors
eigenval = eigen(cor(cardata[,4:9]))
eigenval$values #print the eigen values of the correlation matrix
fit <- principal(cardata[,4:9], nfactors=5, rotate="none") # use none to investigate, before using varimax rotation
fit$loadings
fit <- principal(cardata[,4:9], nfactors=3, rotate="varimax")
fit$loadings
colnames(fit$weights) = c("Appearance", "Performance", "Comfort") # Naming the factors
fit$weights #printing the factor weights
as.data.frame(unclass(fit$loadings) * 3)
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
colnames(fit$scores) = c("Appearance", "Performance", "Comfort")
reduced_data = cbind(cardata[,1:3],fit$scores) #binding the factor scors to the raw data
head(reduced_data) #printing the data for first respondent
attach(reduced_data)
brand.mean=aggregate(reduced_data[,c(4:6)], by=list(Brand), FUN=mean, na.rm=TRUE)
detach(reduced_data)
head(brand.mean)
library(ggplot2)
library(ggrepel)
fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))
#*3
)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-2, 4)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-2, 4),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
library(ggplot2)
library(ggrepel)
fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))
#*3
)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-2, 2)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-2, 2),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
library(ggplot2)
library(ggrepel)
fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))
#*3
)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-1.5, 1.5)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-1.5, 1.5),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
cardata = read.csv(file = "./data/cardata.csv")
head(cardata)
library(psych)
corPlot(cardata[,4:9], numbers = TRUE, upper = FALSE, diag = FALSE)
library(nFactors)
nScree(cardata[,4:9], cor=TRUE) #This function help you determine the number of factors
eigenval = eigen(cor(cardata[,4:9]))
eigenval$values #print the eigen values of the correlation matrix
fit <- principal(cardata[,4:9], nfactors=5, rotate="none") # use none to investigate, before using varimax rotation
fit$loadings
fit <- principal(cardata[,4:9], nfactors=3, rotate="varimax")
fit$loadings
colnames(fit$weights) = c("Appearance", "Performance", "Comfort") # Naming the factors
fit$weights #printing the factor weights
as.data.frame(unclass(fit$loadings) * 3)
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
colnames(fit$scores) = c("Appearance", "Performance", "Comfort")
reduced_data = cbind(cardata[,1:3],fit$scores) #binding the factor scors to the raw data
head(reduced_data) #printing the data for first respondent
attach(reduced_data)
brand.mean=aggregate(reduced_data[,c(4:6)], by=list(Brand), FUN=mean, na.rm=TRUE)
detach(reduced_data)
head(brand.mean)
library(ggplot2)
library(ggrepel)
fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))
#*3
)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-1.5, 1.5)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-1.5, 1.5),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
attach(brand.mean)
# 3D Scatterplot
library(scatterplot3d)
s3d <- scatterplot3d(Appearance, Performance, Comfort,
scale.y = 1, type='h', asp = 1,
main="3D Perceptual Map")
text(s3d$xyz.convert(Appearance, Performance, Comfort + c(rep(0.05,5),0.1)),
labels=(brand.mean[,1]),
col = 'red')
detach(brand.mean)
attach(reduced_data)
brand_by_edu=aggregate(reduced_data[,c(4:6)], by=list(Brand, Education),
FUN=mean, na.rm=TRUE)
colnames(brand_by_edu) = c("Brand", "Edu", "Appearance", "Performance", "Comfort")
detach(reduced_data)
brand_by_edu # Print the average factor scores by brand and education
attach(brand_by_edu)
# 3D Scatterplot
library(scatterplot3d)
s3d1 <- scatterplot3d(brand_by_edu[,3], brand_by_edu[,4],
brand_by_edu[,5], xlab = "Appearance",
ylab = "Performance", zlab = "Comfort",
scale.y = 1, type='h', asp = 1,
main="3D Perceptual Map")
tmp <- brand_by_edu[which(brand_by_edu$Edu == 'MBA'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'darkgreen')
tmp <- brand_by_edu[which(brand_by_edu$Edu=='Undergrad'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'red')
legend(-3, 8,
legend=c("MBA", "Undergrad"),
col=c("red", "darkgreen"), lty=1, cex=0.8)
# Append preference data
red_data = cbind(cardata[,c(2,3,10)], fit$scores)
colnames(red_data) = c("Brand", "Edu", "Preference", "Appearance", "Performance", "Comfort")
head(red_data)
# Multiple Linear Regression
regfit <- lm(Preference ~ Appearance + Performance + Comfort, data=red_data)
summary(regfit) # show results
attach(brand_by_edu)
# 3D Scatterplot
library(scatterplot3d)
s3d1 <- scatterplot3d(brand_by_edu[,3], brand_by_edu[,4],
brand_by_edu[,5], xlab = "Appearance",
ylab = "Performance", zlab = "Comfort",
scale.y = 1, type='h', asp = 1,
main="3D Perceptual Map")
tmp <- brand_by_edu[which(brand_by_edu$Edu == 'MBA'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'darkgreen')
tmp <- brand_by_edu[which(brand_by_edu$Edu=='Undergrad'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'red')
legend(-3, 8,
legend=c("MBA", "Undergrad"),
col=c("red", "darkgreen"), lty=1, cex=0.8)
cardata = read.csv(file = "./data/cardata.csv")
head(cardata)
library(psych)
corPlot(cardata[,4:9], numbers = TRUE, upper = FALSE, diag = FALSE)
library(psych)
corPlot(cardata[,4:9], numbers = TRUE, upper = FALSE, diag = FALSE)
cardata = read.csv(file = "./data/cardata.csv")
head(cardata)
library(psych)
corPlot(cardata[,4:9], numbers = TRUE, upper = FALSE, diag = FALSE)
library(nFactors)
nScree(cardata[,4:9], cor=TRUE) #This function help you determine the number of factors
eigenval = eigen(cor(cardata[,4:9]))
eigenval$values #print the eigen values of the correlation matrix
fit <- principal(cardata[,4:9], nfactors=5, rotate="none") # use none to investigate, before using varimax rotation
fit$loadings
fit <- principal(cardata[,4:9], nfactors=3, rotate="varimax")
fit$loadings
colnames(fit$weights) = c("Appearance", "Performance", "Comfort") # Naming the factors
fit$weights #printing the factor weights
as.data.frame(unclass(fit$loadings) * 3)
#ty_car[(nrow(ty_car)-5):nrow(ty_car),]
colnames(fit$scores) = c("Appearance", "Performance", "Comfort")
reduced_data = cbind(cardata[,1:3],fit$scores) #binding the factor scors to the raw data
head(reduced_data) #printing the data for first respondent
attach(reduced_data)
brand.mean=aggregate(reduced_data[,c(4:6)], by=list(Brand), FUN=mean, na.rm=TRUE)
detach(reduced_data)
head(brand.mean)
library(ggplot2)
library(ggrepel)
fit <- principal(cardata[,4:9], nfactors = 3, rotate="varimax")
#extracting scores and loadings info from "fit" object, and binding them together in order to plot together
ty_car = rbind(as.data.frame(unclass(fit$scores)),
(as.data.frame(unclass(fit$loadings))
#*3
)) #multiplied by scalar for plot
colnames(ty_car) = c("Appearance", "Performance", "Comfort")
ggplot(brand.mean, aes(Appearance, Performance)) +
#first, the scores
#for the students, we will restrict the referenced data to only the first 10 rows of ty (the last 6 are classes).
#rather than plotting points ('geom_point()'), we are plotting the text, hence the use of the geom_text function
geom_text(data = brand.mean,
aes(x = brand.mean[,2],
y = brand.mean[,3],
label = brand.mean[,1]))  +
scale_y_continuous(limits = c(-1.5, 1.5)
#, sec.axis = sec_axis(~./2, name = "Performance")
) +
scale_x_continuous(limits = c(-1.5, 1.5),
#, sec.axis = sec_axis(~./2, name = "Appearance")
) +
#the below is purely to make the plot look better, setting colors, typeface, etc.
theme_classic() +
theme(axis.text.x.top = element_text(color = "red"),
axis.text.y.right =  element_text(color = "red"),
plot.title = element_text(face = "bold",hjust = 0.5)) +
geom_hline(yintercept = 0, linetype = "dotted", alpha = .4) +
geom_vline(xintercept = 0, linetype = "dotted", alpha = .4) +
#now we do loadings! referencing a subset of row vectors that correspond to the loadings data
#plotting 'segments' as the line one can draw between the origin and the point
geom_segment(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y =ty_car[(nrow(ty_car)-5):nrow(ty_car),2]),
xend=0,
yend=0,
arrow = arrow(length = unit(0.03, "npc"),
ends = "first"),
color = "red") +
#'smart labels' that won't overlap with each other
geom_label_repel(data=ty_car[(nrow(ty_car)-5):nrow(ty_car),],
aes(x = ty_car[(nrow(ty_car)-5):nrow(ty_car),1],
y = ty_car[(nrow(ty_car)-5):nrow(ty_car),2],
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),])),
label = rownames(ty_car[(nrow(ty_car)-5):nrow(ty_car),]),
segment.alpha = .25,
box.padding = unit(0.35, "lines"),
segment.color = "grey50")
#setting a title
ggtitle("Perceptual Map\n")
#and, finally, saving to your working directory
ggsave("pca_plot_example.png", height = 8, width = 8)
attach(brand.mean)
# 3D Scatterplot
library(scatterplot3d)
s3d <- scatterplot3d(Appearance, Performance, Comfort,
scale.y = 1, type='h', asp = 1,
main="3D Perceptual Map")
text(s3d$xyz.convert(Appearance, Performance, Comfort + c(rep(0.05,5),0.1)),
labels=(brand.mean[,1]),
col = 'red')
detach(brand.mean)
attach(reduced_data)
brand_by_edu=aggregate(reduced_data[,c(4:6)], by=list(Brand, Education),
FUN=mean, na.rm=TRUE)
colnames(brand_by_edu) = c("Brand", "Edu", "Appearance", "Performance", "Comfort")
detach(reduced_data)
brand_by_edu # Print the average factor scores by brand and education
attach(brand_by_edu)
# 3D Scatterplot
library(scatterplot3d)
s3d1 <- scatterplot3d(brand_by_edu[,3], brand_by_edu[,4],
brand_by_edu[,5], xlab = "Appearance",
ylab = "Performance", zlab = "Comfort",
scale.y = 1, type='h', asp = 1,
main="3D Perceptual Map")
tmp <- brand_by_edu[which(brand_by_edu$Edu == 'MBA'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'darkgreen')
tmp <- brand_by_edu[which(brand_by_edu$Edu=='Undergrad'),]
text(s3d1$xyz.convert(tmp$Appearance, tmp$Performance,
tmp$Comfort + c(rep(0.05,5),0.1)),
labels=(tmp$Brands), col = 'red')
legend(-3, 8,
legend=c("MBA", "Undergrad"),
col=c("red", "darkgreen"), lty=1, cex=0.8)
# Append preference data
red_data = cbind(cardata[,c(2,3,10)], fit$scores)
colnames(red_data) = c("Brand", "Edu", "Preference", "Appearance", "Performance", "Comfort")
head(red_data)
# Multiple Linear Regression
regfit <- lm(Preference ~ Appearance + Performance + Comfort, data=red_data)
summary(regfit) # show results
